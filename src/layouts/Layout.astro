---
interface Props {
  title: string;
}

const { title } = Astro.props;
import { ViewTransitions } from "astro:transitions";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Sand {title}</title>
    <ViewTransitions />
  </head>
  <body class="dark">
    <div class="relative h-screen p-4 flex justify-end">
      <div
        class="rounded-lg bg-zinc-900 flex-1 max-w-6xl mx-auto overflow-y-auto"
      >
        <slot />
      </div>
    </div>
    <style is:global>
      :root {
        --color-primary: theme(colors.green.500);
        --color-background: theme(colors.zinc.950);
        --color-foreground: theme(colors.zinc.900);
      }
      body {
        background: var(--color-background);
        color: white;
      }

      * {
        scrollbar-width: 10px;
        scrollbar-color: rgb(50, 50, 50) rgb(30, 30, 30);
      }
      *::-webkit-scrollbar {
        height: 10px;
        width: 10px;
      }
      *::-webkit-scrollbar-track {
        border-radius: 5px;
        background-color: transparent;
      }

      *::-webkit-scrollbar-track:hover {
        background-color: rgb(30, 30, 30);
      }

      *::-webkit-scrollbar-track:active {
        background-color: rgb(30, 30, 30);
      }

      *::-webkit-scrollbar-thumb {
        border-radius: 5px;
        background-color: rgb(50, 50, 50);
      }

      *::-webkit-scrollbar-thumb:hover {
        background-color: rgb(70, 70, 70);
      }

      *::-webkit-scrollbar-thumb:active {
        background-color: rgb(70, 70, 70);
      }
    </style>
    <script is:inline defer>
      function setContainerColor(dataColor) {
        const playlistContainer = document.getElementById("playlist-container");
        const currentColor = playlistContainer?.getAttribute("data-color");
        if (dataColor && dataColor !== currentColor) {
          playlistContainer?.style.setProperty("--context-color", dataColor);
          playlistContainer?.setAttribute("data-color", dataColor);
        }
      }

      window.coloradTimeout = null;
      for (const playlist of document.querySelectorAll(".playlist-item")) {
        playlist.addEventListener("mouseover", () =>
          onMouseOverColorad(playlist)
        );
        playlist.addEventListener("mouseout", onMouseOutColorad);
        playlist.addEventListener("focus", () => onMouseFocusColorad(playlist));
        playlist.addEventListener("blur", onMouseOutColorad);
      }

      function onMouseFocusColorad(el) {
        if (el) {
          const dataColor = el.getAttribute("data-color");
          if (!dataColor) return;
          setContainerColor(dataColor);
        }
      }
      function onMouseOverColorad(el) {
        if (el) {
          const dataColor = el.getAttribute("data-color");
          if (!dataColor) return;
          window.coloradTimeout = setTimeout(
            () => setContainerColor(dataColor),
            200
          );
        }
      }
      function onMouseOutColorad() {
        if (window.coloradTimeout) {
          clearTimeout(window.coloradTimeout);
          window.coloradTimeout = null;
        }
      }
    </script>
  </body>
</html>
